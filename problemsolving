Strategies.

Define what an algorithm is
devise a plan to solve algorithms
compare and contrast problem solving patterns
including frequency counters two pointer problems
and divide and conquer


An algorithm 

a process or set of steps to accomplish a certain task.

almost everything you do in programming involves
some kind of algorithm
foundation for being a scucessful problem solving and developer

1.) Devise a plan for solving problems.
2.) Master common problem solving patterns.


- understand the problem.
- explore concrete examples.
- break it down.
- solve/simplify problem.
- look back and refactor.

Can I restate the problem in my own words
what are the inputs that go into the problems
what are the outputs that should come from the solution

can the outputs be determined from the inputs?
Do I have enough information to solve the problem

how should I label the important pieces of data that are part of the problem.

//
    Write a function which takes two numbers and return their sum
 
can you check the result?
can you derive the result differently?
can you understand it at a glance?
can you use the result or method for some other problem?
can you improve the performance of your solution?
can you think of other ways to refactor?
how have other people solved this problem?


1.) Problem solving patterns.

Frequency Counter Pattern - 

Write a function called same which accepts two arrays.
The function should return true if every value in the array
has it's corresponding value squared in the second array.
The frequency of values must be the same. 

build an object that returns the count of each occurence.
then iterate over that object. 

function same(arr1, arr2){
    if(arr1.length !== arr2.length){
        return false;
    }
    let frequencyCounter1 = {}
    let frequencyCounter2 = {}
    for(let val of arr1){
        frequencyCounter1[val] = (frequencyCounter1[val] || 0) + 1
    }
    for(let val of arr2){
        frequencyCounter2[val] = (frequencyCounter2[val] || 0) + 1        
    }
    console.log(frequencyCounter1);
    console.log(frequencyCounter2);
    for(let key in frequencyCounter1){
        if(!(key ** 2 in frequencyCounter2)){
            return false
        }
        if(frequencyCounter2[key ** 2] !== frequencyCounter1[key]){
            return false
        }
    }
    return true
}

same([1,2,3,2,5], [9,1,4,4,11])


// Given two strings, write a function to determine if the 
// second string is an anagramy of the first. An anagram 
// is a word, phrase, or name formed by rearranging the letters
// of another, such as cinema, formed from iceman.

My first approach:

function validAnagram(string1, string2){

    var sortedString = string1.split('').sort().join('');
    var sortedString2 = string2.split('').sort().join('');
    return sortedString === sortedString2;
}

// validAnagram('aaz', 'zza');
// validAnagram('anagram', 'nagaram');
// validAnagram('rat', 'car');
// validAnagram("awesome", "awesom");
// validAnagram('qwerty', 'qeywrt');
validAnagram('texttwisttime', 'timetwisttext');


suggested approach:

function validAnagramFast(string1, string2){
  if(string1.length !== string2.length){
      return false;
  }   
  const lookup = {}

  for(let i = 0; i < string1.length; i++ ){
      let letter = string1[i];
      lookup[letter] ? lookup[letter] += 1 : lookup[letter] = 1;
  }

  for(let i = 0; i < string2.length; i ++){
      let letter = string2[i];
      if(!lookup[letter]){
          return false;
      }else{
          lookup[letter] -= 1;
      }
  }
  return true;
}

validAnagramFast('anagrams', 'nagarams');


Multiple pointer pattern

Write a function called sumZero which accepts a sortedString
array of integers. The function should find the first pairt
where the sum is 0. Return an array that includes bot hvalues 
that sum to zero or undefined if a pair does not exist. 

sumZero([-3,-2,-1,0,1,2,3]) // [-3, 3]
sumZero([-2, 0, 1, 3]) // undefined
sumZero([1,2,3]) // undefined

function sumZero(arr){
    let left = 0;
    let right = arr.length -1;
    while(left < right ){
        let sum = arr[left] + arr[right];
        if(sum === 0){
            return [arr[left], arr[right]];
        } else if (sum > 0){
            right--;
        }else{
            left++;
        }
    }
}

countUniqueValues
 implement a function called countUniqueValues, which accepts
 a sorted array, and counts the unique values in the array. There
 can be negative numbers in the array, but it will always be sorted.

 countUniqueValue([1,1,1,1,1,2]) // 2
 countUniqueValues([1,2,3,4,4,4,7,7,12,12,13]) // 7
 countUniqueValues([]) // 0


 function countUniqueValues(arr){
    if(arr.length === 0) return 0;
    var i = 0;
    for(var j = 1; j < arr.length; j++){
        if(arr[1] !== arr[j]){
            i++;
            arr[i] = arr[j];
        }
    }
    return i + 1;
}

countUniqueValues([1,1,1,1,1,1,3])


    Sliding WIndow pattern
    This pattern involves creating a window which can eitherb 
    be an array or number from one position to another
    depending on a certain condition, the window either increases
    or closes (and a new window is created)

    very useful for keeping track of a subset of data in an array/string
    etc.

Write a function called maxSubarraySum which accepts an
array of integers and a number called n. the function
should calculate the maximum sum of n consecutive elements in
the array. 

maxSubarraySum([1,2,5,2,8,1,5], 2) //10


nieve approach (nested loop):
function maxSubArraySUm(arr, num ){
    let maxSum = 0 ;
    let tempSum = 0;
    if(arr.length < num ) return null;
    for(let i = 0; i < num; i++){
        maxSum += arr[i];
    }
    tempSum = maxSum;
    for(let i = num; i < arr.length - num +1; i++){
        temp = 0;
        for(let j = 0; j < num; j++){
            temp += arr[i+j];
        }
        if (temp> max) {
            max = temp;
        }
        console.log(temp,max);
    }
    return maxSum;
}


refactored:
function maxSubarraySum(arr, num){
  let maxSum = 0;
  let tempSum = 0;
  if (arr.length < num) return null;
  for (let i = 0; i < num; i++) {
    maxSum += arr[i];
  }
  tempSum = maxSum;
  for (let i = num; i < arr.length; i++) {
    tempSum = tempSum - arr[i - num] + arr[i];
    maxSum = Math.max(maxSum, tempSum);
  }
  return maxSum;
}

maxSubarraySum([2,6,9,2,1,8,5,6,3],3);


  Divide and Conquer algorithms:
  This pattern involves dividing a data set into smaller
  chunks and then repeating a process with a subset of data.
  This pattern can tremendously decrease time complexity.


Given a sorted array of integers, write a function called search, 
that accepts a value and returns the index where the value passed to
the function is located. if the value is not found, return -1.

naive solution is linear search.
function search(array, val){
    let min = 0;
    let max = array.length -1;
    while(min <= max){
        let middle = Math.floor((min + max) / 2);
        let currentElement = array[middle];

        if(array[middle] < val){
            min = middle + 1;
        }
        else if (array[middle] > val){
            max = middle - 1;
        }
        else{
            return middle;
        }
    }
    return -1;
}





