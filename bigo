O(n);
O(1);
O(n^2);


smaller terms don't matter

Arithmetic operations are constant.
Variable assignment is constant.
Accessing elements in an array or object is constant.
In a loop the complexity is the length of the lop times the
complexity of whatever happens inside of the loop. 


function logAtLeast5(n){
    for(var i = 1; i <= Math.max(5,n); i++){
        console.log(i);
    }
}

o(n)

function logAtMost5(n){
    for(var i = 1; i <= Math.min(5,n); i++){
        console.log(i);
    }
}

as n grows it doesn't matter because we are taling the min. 
It will always only run 5 times. so n is constant.
O(1);


Space complexity
Most primitives (booleans, numbers, undefined, null ) are constant Space
Strings require O(n) space where n is the string length.
reference types are generally O(n) where n is the length for arrays or the number of keys


Analyzing Array and Object performance:
1.) how to objects and arrays work through the lens of BigO.
2.) explain why adding elements to the beginning of an array is costly.
3.) Compare and contrast the runtime for arrays and objects, as well as built-in methods.

let instructor = {
    firstName: "Kelly",
    isInstructor: true,
    favoriteNumbers: [1,2,3,4]
}

1.) when you don't need order, and when you need fast access/insertion and removal. 

Insertion - o(1);
Removal - O(1);
Searching - O(N);
Access - O(1);

Object.keys - O(N);
Object.values - O(N);
Object.entries - O(N);
Object.hasOwnProperty - O(1);

2.) Array, ordered lists, when you need order.
let names = ["Michael", "Melissa", "Andrea"];

Insertion - depends;
 - pushing to an array is constant time. 
 - inserting at at the begining of the array, causes the array to reindex. 
 - push and pop are always faster
  
Removal - depends;
 - removing from the begining causes the array to reindex its contents  
 - push and pop are always faster

Searching O(N);
Access - O(1);

push - o(1);
pop - O(1);
shift - O(N);
unshift - O(N);
concat - O(N);
slice - O(N);
splice - O(N);
sort - O(N * log N);
forEach/map/filter/reduce/etc - O(N);








